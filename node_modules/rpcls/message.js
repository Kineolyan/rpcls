/**
 * Encodes a single action for the message
 * @param action the action to encode
 * @return the encoded action.
 */
function encodeAction(action) {
  var encoded = action.command;

  if (action.args) {
    for (var i in action.args) {
      encoded += ':' + action.args[i];
    }
  }

  return encoded;
}

/**
 * Encodes a serie of actions in a message.
 * @param sender the author of the message
 * @return the message
 * Usage: encode(sender, [message, [..]]);
 */
function encode(sender) {
  // messages are fetched using arguments
  var message = '[' + sender + ']';

  var actions = [];
  for (var actionIndex = 1; actionIndex < arguments.length; ++actionIndex) {
    actions.push(encodeAction(arguments[actionIndex]));
  }

  message += actions.join('|');
  message += ';';

  return message;
}

function decodeAction(encoded) {
  var elements = encoded.split(':');
  var action = {
    command: elements[0],
    args: elements.splice(1)
  };

  for(var index in action.args) {
    var value = action.args[index];
    if (!isNaN(value)) action.args[index] = parseInt(value);
  }

  return action;
}

function decodeMessage(content) {
  var message = {
    actions: []
  };
  var elements = /^\[([^\]]+)\](.*)/.exec(content);

  message.sender = elements[1];
  var actionsBlock = elements[2];
  if (actionsBlock) {
    var actions = actionsBlock.split('|');
    for (var index in actions) {
      message.actions.push(decodeAction(actions[index]));
    }
  }

  return message;
}

function decode(content) {
  var encodedMessages = content.split(';');
  var messages = [];

  for (var index in encodedMessages) {
    var encodedMessage = encodedMessages[index];
    if (encodedMessage != '') {
      messages.push(decodeMessage(encodedMessage));
    }
  }

  return messages;
}

// Exports
exports.encode = encode;
exports.decode = decode;
