var msg = require('rpcls/message');

function Client(manager, socket, id) {
  this.manager = manager;
  this.socket = socket;
  this.id = id;

  var object = this;
  this.treatAction = this.initiateGame;

  socket.on('data', function(data) { object.onData(data); });
  socket.on('end', function() { object.onEnd(); });

  this.send({ command: 'id', args: [ this.id ] });
}

Client.prototype = {
  send: function() {
    var messageArguments = [ 'Server' ];
    for (var index = 0; index < arguments.length; ++index) {
      messageArguments.push(arguments[index]);
    }
  
    var message = msg.encode.apply(null, messageArguments);
    this.socket.write(message);
  },

  sendError: function(socket, error) {
    this.send({ command: 'error', args: [ error ] });
  },

  askToPlay: function() {
    this.askingSign = true;
    this.send({ command: 'play' });
  },

  onData: function(data) {
    var messages = msg.decode(data.toString());

    for (var messageIndex in messages) {
      var message = messages[messageIndex];
      for (var actionIndex in message.actions) {
        var action = message.actions[actionIndex];

        this.treatAction(action);
      }
    }
  },

  initiateGame: function(action) {
    switch (action.command) {
    case 'create':
      this.manager.createGame(this);
      this.treatAction = this.playGame;
      break;

    case 'join':
      this.manager.joinGame(action.args[0], this);
      this.treatAction = this.playGame;
      break;

    default:
      this.sendError('Invalid action. Use create or join');
    }
  },

  playGame: function(action) {
    if (action.command == 'play') {
      if (this.askingSign) {
        this.askingSign = false;
        this.referee.play(this, action.args[0]);
      } else {
        this.sendError('Already played');
      }
    } else {
      this.sendError("Invalid action. Play is expected.");
    }
  },  

  onEnd: function() {
    this.manager.unregisterClient(this);
  },

  /**
   * Notifies of the creation of a game.
   * @param gameId id of the created game
   */
  gameCreated: function(gameId) {
    this.send({ command: 'game', args: [ gameId ] });
  },

  /**
   * Notifies the client that the game has been joined.
   */
  gameJoined: function() {
    this.send({ command: 'joined' });
  },

  win: function() {
    this.send({ command: 'victory' });
  },

  lose: function() {
    this.send({ command: 'defeat' });
  },

  winSet: function(opponentSign) {
    this.send({ command: 'win', args: [ opponentSign ] });
  },

  loseSet: function(opponentSign) {
    this.send({ command: 'lose', args: [ opponentSign ] });
  },

  deuce: function() {
    this.send({ command: 'deuce' });
  },

  endGame: null
};

// Exports
exports.Client = Client;
