var rules = require('rules');

function Game(player1, player2, limit, turnLimit) {
  this.player1 = player1;
  this.player2 = player2;
  this.limit = limit;
  this.turns = 0;
  this.turnLimit = isNaN(turnLimit) ? 0 : turnLimit;

  // Initialize scores
  this.player1.score = 0;
  this.player2.score = 0;
}

function functionFalse() { return false; }

Game.prototype = {
  play: function(sign1, sign2) {
    var sign1Wins = rules.play(sign1, sign2);
    var sign2Wins = rules.play(sign2, sign1);

    if (sign1Wins && !sign2Wins) {
      ++this.player1.score;
      if (this.hasWon(this.player1.score)) {
        this.closeGame(this.player1, this.player2);
      }
    } else if (!sign1Wins && sign2Wins) {
      ++this.player2.score;
      if (this.hasWon(this.player2.score)) {
        this.closeGame(this.player2, this.player1);
      }
    }
    // else: deuce

    this.logTurn();
  },

  logTurn: function() {
    ++this.turns;

    if (this.turns == this.turnLimit) {
      this.limit = Math.max(this.player1.score, this.player2.score) + 1;
    }
//    console.log('[%d/%d] %d - %d (=> %d)'
//      , this.turns, this.turnLimit, this.player1.score, this.player2.score, this.limit);
  },

  hasWinner: function() {
    return this.winner !== undefined;
  },

  hasWon: function(score) {
    return score == this.limit;
  },

  closeGame: function(winner, loser) {
    this.winner = winner;
    this.loser = loser;
    this.hasWon = functionFalse; // prevents further election of winner
  }
};

// Exports
exports.Game = Game;
